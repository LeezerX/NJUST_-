figure('Units', 'centimeter', 'Position', [15 3 20 17], 'name', '六点差分格式'); % 设置图片大小

h = 1/40;t = 1/1600;
Z1 = solve(h, t);
draw(h, t, Z1, 1, "h=1/40, t=1/1600,r=1");
h = 1/80;t = 1/3200;
Z2 = solve(h, t);
draw(h, t, Z2, 2, "h=1/80, t=1/3200,r=2");
Z3 = accurate(h, t);
draw(h, t, Z3, 3, "精确解");
solution_error(1/40,Z1,1/80,Z3,"h=1/40 t=1/1600");
solution_error(1/80,Z2,1/80,Z3,"h=1/80 t=1/3200");

% 对给定的网格进行迭代求解
function u = solve(h, t)
    n = 1 / h - 1; % 待计算的点数: 由于已有第二类边界, 采用最简单的差分格式, 因此只需求解内点, 共 N - 1 个点
    T = 1 / t; % 迭代的时间层数: T = 0 时已知无需迭代
    r = t / (h^2); % 网格比

    % 生成系数矩阵, 隐格式
    A1 = (1 + r) * speye(n);
    A2 = sparse(2:n, 1:n - 1, -r / 2, n, n);
    A = A1 + A2' + A2; % 系数矩阵
    A(1, 1) = 1 + r / 2; % 已知第二类边界条件, 因此需对系数矩阵进行修正
    A(n, n) = 1 + r / 2;
    B1 = (1 - r) * speye(n);
    B2 = sparse(2:n, 1:n - 1, r / 2, n, n);
    B = B1 + B2 + B2';
    B(1, 1) = 1 - r / 2; % 已知第二类边界条件, 因此需对系数矩阵进行修正
    B(n, n) = 1 - r / 2;

    x = 0:h:1;% 网格化区间
    Z = zeros(T + 1, n + 2); % 构成二维曲面, 包括初始以及边界的二维曲面

    % 初值条件
    u_old = cos(pi * x)';
    Z(1, :) = u_old; % 把初值赋值给第一个时间层
    u_old = u_old(2:n + 1); % 只筛选出内点

    % 迭代数值解, 由于边界条件为 0, 因此可以略去修改.
    for i = 2:T + 1
        u_new = A \ (B * u_old + t * (sin((i - 2) * t) + sin((i - 1) * t)) / 2); % 六点差分时, 右端为已知层和待求层的均值
        Z(i, :) = [u_new(1), u_new', u_new(n)]; % 根据第二类边界条件, 边界处的值等于 x 方向相邻点的数值
        u_old = u_new; % 用当前解出的去迭代下一层时间的
    end

    u = Z; % 返回计算出的数值解, 用于绘图以及计算误差
end